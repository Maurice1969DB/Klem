import React, {createContext, useContext, useEffect, useState, useReducer} from 'react';
import './App.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import {Button, Col, Container, Row, Form, Accordion, Card, ProgressBar} from "react-bootstrap";

function capitalize(string)
{
  let stringNew = string.replace(/\[.*?]/,'');

  return stringNew.charAt(0).toUpperCase() + stringNew.slice(1);
}

function Answer(props)  {

    const {answer, onClick, question, reset} = props;

    const [answerState, setAnswerState] = useState({color: 'light', disabled: false});

    useEffect(function () {
        if (reset)
        {
            setAnswerState({color: 'light', disabled: false});
        }
    }, [reset]);

    function setLocalState(id)
    {
        if (answer.matrix[question][id])
        {
            setAnswerState({color: 'right', disabled: true});
            onClick(true);
        }
        else
        {
            setAnswerState({color: "false", disabled: true});
            setTimeout(function () {
                onClick(false);
            }, 800);
        }
    }

  return (

        <Button variant={answerState.color} disabled={answerState.disabled} key={answer.id} onClick={() => setLocalState(answer.id)} size="lg" block>{capitalize(answer.answer)}</Button>
  )
}

function Question(props) {
  const {question} = props;
  return(
          <h2 align="center">{capitalize(question)}</h2>
  );
}

function CountDown(props) {

    const {timer} = props;

        return (

            <div>
                <ProgressBar variant="info" now={(timer.timerTime / timer.timerStart) * 100}/>
            </div>

        );

}

function App() {

  const [games] = useState(setData());
  const [currentGame] = useState(1);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [resetState, setResetState] = useState(true);

  const [credits, setCredits] = useState(localStorage.getItem('credits') === null ? 5 : localStorage.getItem('credits'));
  const [timer, setTimer] = useState({
      timerOn: false,
      timerTime: localStorage.getItem('question_time') === null ? 10 : localStorage.getItem('question_time'),
      timerStart: 0
  });

  useEffect(() => {

      if (timer.timerOn === true) {

          const globalTimer = setInterval(function () {
              const newTime = timer.timerTime - .1;

              if (newTime >= 0) {
                  setTimer({timerOn: true, timerTime: newTime, timerStart: timer.timerStart});
              }

              return clearInterval(globalTimer);

          }, 100);

          console.log(timer.timerTime);
          if (Math.round(timer.timerTime) <= 0) {

              setTimer({timerOn: false});
          }
      }

  }, [timer]);


  function startTimer() {

      console.log(timer.timerTime);
      if (!timer.timerOn && timer.timerTime > 0)
      {
          setTimer({timerOn: true, timerTime: timer.timerTime, timerStart: timer.timerStart});
      }
  }

  function resetTimer() {
      if (timer.timerOn === false)
      {
          setTimer({timerStart: timer.timerStart });
      }
  }

  function retrieveCurrentGame() {

    let current = null;

    for (const item of games)
    {
      if (item.game === currentGame)
      {
        current = item;
      }
    }

    return current;
  }

  function setData() {
    let matrix, questions, answers, set;
    let x, y;
    let i;
    let data = [{id: 11785, klem_data: '[["Dieren","schildpad","hamster","bever","krokodil","wolf"],["knaagdier",0,1,1,0,0],["in De Fabeltjeskrant",1,1,1,0,1],["reptiel",1,0,0,1,0],["leeft in het water",1,0,1,1,0],["Toon __, vriend van Broer Konijn",1,0,0,0,0]]', position: 1 }];
    let docs = [];
    let counter = 0;
    for (const item of data) {

      matrix = [];
      questions = [];
      answers = [];
      set = JSON.parse(data[counter].klem_data);

    for (x = 0; x < (set[0].length) - 1; x++) {
        matrix[x] = [];
        for (y = 0; y < (set[0].length) - 1; y++) {
            matrix[x][y] = set[x + 1][y + 1];
        }
    }

      for (i = 0; i < (set[0].length) - 1; i++) {
        answers[i] = {};
        answers[i].answer = set[0][i + 1];
        answers[i].id = i;
        answers[i].matrix = matrix;
        questions[i] = set[i + 1][0];
      }

      docs.push({

        id: item.id,
        title: set[0][0],
        answers: answers,
        questions: questions,
        matrix: matrix,
        game: item.position,
        number: answers.length,

      });

      counter++;
    }

    return docs;
  }


  function handleAnswer(isRight) {

      let game = retrieveCurrentGame();
      let numberOfQuestions = game.answers.length;
      setResetState(false);
      startTimer();

      function nextQuestion(currentQuestion)
      {
         if (currentQuestion < (numberOfQuestions - 1) ) {

             return (currentQuestion) => currentQuestion + 1;
         }
         else
         {
             return 0;
         }
      }

      if (isRight)
      {
          setCurrentQuestion(nextQuestion(currentQuestion));
      }
      else
      {
          setResetState(true);
      }

  }

  function handleFormSubmit(event) {

      event.preventDefault();

      const form = event.currentTarget;

      const time = form.elements.timer.value;

      if (timer.timerOn === false)
      {
          setTimer({timerStart: time, timerTime: time});
      }

      console.log(time);

      localStorage.setItem('credits', credits.toString());
      localStorage.setItem('question_time', time.toString());
  }

  function handleChange(event) {
      const input = event.target;
      const value = input.value;

      setCredits(value);
  }


  function renderMain(){


      return (
          <CountDown timer={timer}/>
      );
  }

  function renderGame() {

    let game = retrieveCurrentGame();

    return(
            <Container>
                <Row className="justify-content-md-center">
                    <Col>
                        <Question question={game.questions[currentQuestion]}/>
                    </Col>
                </Row>
                    {

                      game.answers.map(function (answer, id) {

                        return(
                                <Answer reset={resetState} key={id} question={currentQuestion} answer={answer} onClick={(isRight) => handleAnswer(isRight)}/>
                        )
                      })
                    }
            </Container>
  );

  }
  
  function renderControls() {
      return (
          <Col>
              <Form onSubmit={handleFormSubmit}>
                  <Form.Group controlId="credits">
                      <Form.Label column={10}>Credits</Form.Label>
                      <Form.Control name="credits" onChange={handleChange} placeholder={credits}/>
                  </Form.Group>
                  <Form.Group controlId="timer">
                      <Form.Label column={10}>Timer</Form.Label>
                      <Form.Control name="timer" placeholder={timer.timerTime}/>
                  </Form.Group>
                  <Button type="submit" variant="primary">Opslaan</Button>
              </Form>
          </Col>
      );
  }

  return (
        <Container>
            <Row>
                <Col>
                    {renderMain()}
                </Col>
            </Row>
            <Row className="justify-content-md-center">

              <Col>
                {renderGame()}
              </Col>
            </Row>
            <br/>
            <Row className="justify-content-md-center">
                <Col xs={4}>
                        <Card>
                            <Card.Header>
                                Instellingen
                            </Card.Header>
                                <Card.Body>
                                    <Row>
                                        {renderControls()}
                                    </Row>
                                </Card.Body>
                        </Card>

                </Col>
            </Row>
        </Container>
  );
}

export default App;
